name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Lint with flake8
        working-directory: ./backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.aws-sam,venv,.git,__pycache__,*/vendored/*
          
      - name: Run unit tests
        working-directory: ./backend
        run: |
          pytest -v tests/

  build-backend:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install development tools
        run: |
          python -m pip install --upgrade pip
          pip install aws-sam-cli
          
      - name: Create optimized dependency layers
        working-directory: ./backend
        run: |
          # 1. Create core dependencies layer (without boto3)
          mkdir -p core-dependencies/python
          echo "Installing core dependencies..."
          pip install fastapi mangum pydantic python-dotenv requests -t core-dependencies/python
          
          # 2. Create NLP/ML dependencies layer
          mkdir -p nlp-dependencies/python
          echo "Installing NLP dependencies..."
          pip install nltk textstat textblob guess_language-spirit -t nlp-dependencies/python
          
          # Aggressive cleanup to minimize layer size
          for layer in core-dependencies nlp-dependencies; do
            echo "Cleaning up $layer..."
            # Remove boto3 and botocore which are already in Lambda runtime
            rm -rf $layer/python/boto* 2>/dev/null || true
            
            # Remove all cache files
            find $layer/python -name "*.pyc" -delete || true
            find $layer/python -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            
            # Remove distribution info
            find $layer/python -name "*.dist-info" -exec rm -rf {} + 2>/dev/null || true
            find $layer/python -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
            
            # Remove tests directories to save space
            find $layer/python -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
            find $layer/python -type d -name "test" -exec rm -rf {} + 2>/dev/null || true
            
            # Remove documentation and examples
            find $layer/python -type d -name "docs" -exec rm -rf {} + 2>/dev/null || true
            find $layer/python -type d -name "doc" -exec rm -rf {} + 2>/dev/null || true
            find $layer/python -type d -name "examples" -exec rm -rf {} + 2>/dev/null || true
            
            # Strip binaries if present
            find $layer/python -name "*.so" -exec strip {} \; 2>/dev/null || true
            
            # Check layer size
            LAYER_SIZE=$(du -sm $layer | cut -f1)
            echo "$layer size: ${LAYER_SIZE}MB"
          done
      
      - name: Validate SAM template
        working-directory: ./backend
        run: |
          sam validate --region ${{ secrets.AWS_REGION || 'us-east-1' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Build SAM application
        working-directory: ./backend
        run: |
          sam build --use-container
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          
      - name: Archive built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/.aws-sam/
            backend/template.yaml
            backend/samconfig.toml
            backend/core-dependencies/
            backend/nlp-dependencies/

  test-frontend:
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip until frontend is implemented
    steps:
      - uses: actions/checkout@v3

  build-frontend:
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip until frontend is implemented
    needs: test-frontend
    steps:
      - uses: actions/checkout@v3

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/')) || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: .
          
      - name: Check downloaded artifact structure
        run: |
          echo "Root directory contents:"
          ls -la
          find . -type d -name "core-dependencies" | xargs -I{} ls -la {} || echo "No core-dependencies directories found"
          find . -type d -name "nlp-dependencies" | xargs -I{} ls -la {} || echo "No nlp-dependencies directories found"
          
      - name: Validate modified template
        run: |
          TEMPLATE_PATH=$(find . -name template.yaml | head -1)
          sam validate --template $TEMPLATE_PATH
          
      - name: Ensure dependencies are in the right location
        run: |
          # Make sure core and NLP dependencies are in the right place
          mkdir -p backend/core-dependencies
          mkdir -p backend/nlp-dependencies
          
          # Copy from downloaded artifacts if needed
          if [ -d "./core-dependencies" ]; then
            cp -r ./core-dependencies/* backend/core-dependencies/ || true
          fi
          
          if [ -d "./nlp-dependencies" ]; then
            cp -r ./nlp-dependencies/* backend/nlp-dependencies/ || true
          fi
          
      - name: Deploy SAM application
        working-directory: ./backend
        run: |
          # Ensure layers are set up properly
          mkdir -p .aws-sam/build/CoreDependenciesLayer
          mkdir -p .aws-sam/build/NltkDependenciesLayer
          
          # Copy dependencies to build locations
          cp -r core-dependencies/* .aws-sam/build/CoreDependenciesLayer/ || true
          cp -r nlp-dependencies/* .aws-sam/build/NltkDependenciesLayer/ || true
          
          # List layer sizes
          echo "Core dependencies layer size:"
          du -sh .aws-sam/build/CoreDependenciesLayer || true
          echo "NLTK dependencies layer size:"
          du -sh .aws-sam/build/NltkDependenciesLayer || true
          
          # Deploy with error handling
          set +e  # Don't exit on error
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
            --parameter-overrides "Stage=${{ github.event.inputs.deploy_env || 'dev' }}" \
            --s3-bucket "questionnaire-knowledge-base" \
            --template-file template.yaml
          
          DEPLOY_STATUS=$?
          if [ $DEPLOY_STATUS -ne 0 ]; then
            echo "❌ Deployment failed with status $DEPLOY_STATUS"
            # List CloudFormation events for debugging
            aws cloudformation describe-stack-events \
              --stack-name llm-response-evaluator \
              --max-items 10 \
              --query "StackEvents[*].{Status:ResourceStatus,Type:ResourceType,Reason:ResourceStatusReason}" \
              --output table
            exit $DEPLOY_STATUS
          fi

  deploy-frontend:
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip until frontend is implemented
    needs: [test-frontend, build-frontend, deploy-backend]
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - uses: actions/checkout@v3

  # Run integration tests after deployment
  integration-test:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-playwright requests
          
      - name: Get API endpoint
        id: get-api-endpoint
        run: |
          # For production, you would retrieve this from CloudFormation outputs
          # For now, we'll use a environment variable
          echo "API_ENDPOINT=${{ secrets.API_ENDPOINT }}" >> $GITHUB_ENV
          
      - name: Run API integration tests
        working-directory: ./backend/tests
        run: |
          # Run your integration tests here
          echo "Running integration tests against $API_ENDPOINT"
          # Example: pytest integration_tests/ -v
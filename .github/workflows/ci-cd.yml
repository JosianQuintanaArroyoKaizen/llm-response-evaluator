name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Lint with flake8
        working-directory: ./backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.aws-sam,venv,.git,__pycache__,*/vendored/*
          
      - name: Run unit tests
        working-directory: ./backend
        run: |
          pytest -v tests/

  build-backend:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install development tools
        run: |
          python -m pip install --upgrade pip
          pip install aws-sam-cli
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          mkdir -p ./dependencies
          pip install -r requirements.txt -t ./dependencies/python
          
      - name: Validate SAM template
        working-directory: ./backend
        run: |
          sam validate --region ${{ secrets.AWS_REGION || 'us-east-1' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Build SAM application
        working-directory: ./backend
        run: |
          sam build --use-container
        env:
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          
      - name: Archive built artifacts
        uses: actions/upload-artifact@v4  # Changed from v2 to v4
        with:
          name: backend-build
          path: |
            backend/.aws-sam/
            backend/template.yaml
            backend/samconfig.toml

  test-frontend:
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip until frontend is implemented
    steps:
      - uses: actions/checkout@v3

  build-frontend:
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip until frontend is implemented
    needs: test-frontend
    steps:
      - uses: actions/checkout@v3

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/')) || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: .
          
      - name: Deploy SAM application
        working-directory: ./backend
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
            --parameter-overrides "Stage=${{ github.event.inputs.deploy_env || 'dev' }}" \
            --s3-bucket "questionnaire-knowledge-base"

  deploy-frontend:
    runs-on: ubuntu-latest
    if: ${{ false }}  # Skip until frontend is implemented
    needs: [test-frontend, build-frontend, deploy-backend]
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - uses: actions/checkout@v3

  # Run integration tests after deployment
  integration-test:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'dev' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-playwright requests
          
      - name: Get API endpoint
        id: get-api-endpoint
        run: |
          # For production, you would retrieve this from CloudFormation outputs
          # For now, we'll use a environment variable
          echo "API_ENDPOINT=${{ secrets.API_ENDPOINT }}" >> $GITHUB_ENV
          
      - name: Run API integration tests
        working-directory: ./backend/tests
        run: |
          # Run your integration tests here
          echo "Running integration tests against $API_ENDPOINT"
          # Example: pytest integration_tests/ -v